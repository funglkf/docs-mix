{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"","tags":["home"]},{"location":"#quick-start-on-localhost","title":"Quick Start on localhost","text":"<p>Note</p> Global PythonVirtual environment <pre><code>pip install -r requirements.txt\nmkdocs serve\n</code></pre> <pre><code>source env/Scripts/activate\npip install -r requirements.txt\nmkdocs serve\n</code></pre>","tags":["home"]},{"location":"#qick-deploy-to-github-now-by-github-action","title":"Qick deploy to Github (Now by github action)","text":"<p><code>mkdocs gh-deploy --force</code></p>","tags":["home"]},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#git","title":"git","text":"<ul> <li>Git workflow</li> <li>Auto deploy after git push</li> </ul>"},{"location":"tags/#home","title":"home","text":"<ul> <li>Home</li> </ul>"},{"location":"tags/#mac","title":"mac","text":"<ul> <li>Mac OS</li> </ul>"},{"location":"tags/#markdown","title":"markdown","text":"<ul> <li>SvelteKit blog</li> </ul>"},{"location":"tags/#mkdocs","title":"mkdocs","text":"<ul> <li>mkdocs</li> <li>Cheat Sheet</li> <li>Cheat Sheet (mkdocs-material)</li> </ul>"},{"location":"tags/#mkdocs-material","title":"mkdocs-material","text":"<ul> <li>Cheat Sheet (mkdocs-material)</li> </ul>"},{"location":"tags/#postgresql","title":"postgresql","text":"<ul> <li>SQL Cheat sheet</li> <li>Query Sample</li> <li>function Sample</li> </ul>"},{"location":"tags/#python","title":"python","text":"<ul> <li>Python</li> </ul>"},{"location":"tags/#setup","title":"setup","text":"<ul> <li>Python</li> </ul>"},{"location":"tags/#shell","title":"shell","text":"<ul> <li>Linux shell script</li> </ul>"},{"location":"tags/#sql","title":"sql","text":"<ul> <li>SQL Cheat sheet</li> <li>Query Sample</li> <li>function Sample</li> </ul>"},{"location":"tags/#svelte","title":"svelte","text":"<ul> <li>SvelteKit blog</li> </ul>"},{"location":"develop/macos/","title":"MAC OS notes","text":"","tags":["mac"]},{"location":"develop/macos/#document-title","title":"Document title","text":"<p>P</p>","tags":["mac"]},{"location":"develop/shell/","title":"Shell script","text":"","tags":["shell"]},{"location":"develop/shell/#loop-line-of-txt-file","title":"Loop line of txt file","text":"<pre><code>while read p; do\necho \"$p\" ## trim white space\ntrimmed_line=\"$(echo -e \"${p}\" | tr -d '[:space:]')\"\n\nnewfilename=$trimmed_line.sql\n\n    ## append to template.sql and create new file\necho \"\\set var $log_hash\" | cat - template.sql &gt;  \"sql/$newfilename\"    done &lt;file.txt\n</code></pre>","tags":["shell"]},{"location":"develop/shell/#using-ssh-to-copy-server-folder-to-local","title":"Using ssh to copy server folder to local","text":"<pre><code>scp -r userid@host.address:/path/of/folder /target/local/folder\n</code></pre>","tags":["shell"]},{"location":"develop/git/1.workflow/","title":"Git workflow","text":"","tags":["git"]},{"location":"develop/git/1.workflow/#quick-update-flow","title":"Quick Update flow","text":"<pre><code>git add *\ngit commit -m \"Message you want to deliver\"\ngit pull origin master -r\ngit push origin master\n</code></pre>","tags":["git"]},{"location":"develop/git/1.workflow/#detail-workflow","title":"Detail Workflow","text":"<p>Thanks for dephic great reference</p> <p>Once upon a time, a dwarf named Krevorook took a quest from a tree elf to build a static website and host it in CDN like Netlify. His journey was full of new discoveries\u2026 And befriending a ferocious beast, called GIT, was one of those. Following is a small account of the time they spend together.</p> <p>After setting up the project, Krevorook created a new git repo. So he had his MAIN branch, where deployable (production) code lived.</p> <pre><code>git init\ngit add .\ngit commit -m 'init'\n</code></pre> <p>After creating a new Github repository, he added a remote.</p> <pre><code>git remote add origin https://github.com/user/repo.git\ngit push -u origin main\n</code></pre> <p>And <code>git push</code> worked well for him. He made a home page and deployed it.</p> <p>Sometimes he bringed new files.</p> <pre><code>git add .\ngit commit -m 'added: .gitignore'\ngit push\n</code></pre> <p>Sometimes he polished existing ones.</p> <pre><code>git commit -am 'my message'\n</code></pre> <p>When Krevorook had forgotten to add some files or wrote an inaccurate message, he would correct himself.</p> <pre><code>git add .\ngit commit --amend -m 'new message'\n</code></pre> <p>But more often he just made trivial amendments.</p> <pre><code>git commit -a --amend --no-edit\n</code></pre> <p>He also has to make contact and about pages, which were obviously not production ready just yet. So he created a new branch DEV where the \u201cactively developed\u201d code lived.</p> <pre><code>git checkout -b dev\ngit push -u origin dev\n</code></pre> <p>He worked in sessions using pomodoro technique, 30 min work / 3 min break. One session usually took 2-3 hours followed by a minimum 1 hour break or change activity (nothing to do with coding or sitting).\\ At the end of each session Krevorook had the urge to commit, even without a meaningful message.</p> <pre><code>git commit -am 'up'\n</code></pre> <p>It was ok to use dummy commits, because he could always clean up history.</p> <pre><code>git rebase -i HEAD~3\n</code></pre> <p>More often than not he checked out the current state.</p> <pre><code>git status\ngit log --graph --decorate --pretty=oneline --abbrev-commit\n</code></pre> <p>It was very repetitive. Therefore Krevorook turned to his precious pet, Bash, who was of great help for that sort of thing.</p> <pre><code># ~/.bash_aliases\nalias gs='git status'\nalias gl='git log --graph --decorate --pretty=oneline --abbrev-commit'\nalias gc='git commit -m'\nalias gca='git commit -am'\n</code></pre> <p>At last, pages were production ready and craved to be introduced to WWW.</p> <p>And Krevorook joined DEV with MAIN.</p> <pre><code>git checkout main\ngit merge dev\ngit push\n</code></pre> <p>He has the website live with 3 pages: home, contact and about. But contact and about pages were fast made, and maybe he should try to make them better.</p> <p>So he made two new branches, NEW-ABOUT-PAGE and NEW-CONTACT-PAGE, based on DEV, and worked tremendously on them.</p> <pre><code>git branch new-about-page dev\ngit branch new-contact-page dev\n</code></pre> <p>At some point the new contact page looked good, there was nothing to improve. So he joined the NEW-CONTACT-PAGE branch with DEV as a single commit. Then he pushed it all to production and cleaned up the repo, deleting the NEW-CONTACT-PAGE branch.</p> <pre><code># make sure everything is good, some adjustment is needed?\ngit checkout dev\ngit merge --squash new-contact-page\ngit commit -m \"merge new-contact-page\"\n\n# deploy\ngit checkout main\ngit merge dev\ngit push\n\n# delete\ngit branch -d new-contact-page\ngit push origin --delete new-contact-page\n</code></pre> <p>And what about the about page?\\ Contarly to the contact page, the new about page looked not so good at all. So he decided to stick with the current one and moved on.</p> <pre><code>git branch -D new-about-page\ngit push origin --delete new-about-page\n</code></pre> <p>The end.</p>","tags":["git"]},{"location":"develop/git/1.workflow/#commands-sample","title":"Commands sample","text":"<p>Create a new local repository</p> <pre><code>git init\n</code></pre> <p>Displays the status of your working directory, (show modified files).</p> <pre><code>git status\n</code></pre> <p>Displays all commits in the current branch\u2019s history</p> <pre><code>git log\ngit log --graph --decorate --pretty=oneline --abbrev-commit\n</code></pre> <p>Add a file to your next commit (stage)</p> <pre><code>git add [file]\n</code></pre> <p>Add all files to your next commit</p> <pre><code>git add .\n</code></pre> <p>Replaces that last commit with your new, improved commit.</p> <pre><code>git add .\ngit commit --amend -m 'new message'\n</code></pre> <p>Trivial amendments</p> <pre><code>git commit -a --amend --no-edit\n</code></pre> <p>Add, remove, or combine Git commits</p> <pre><code>git rebase -i HEAD~[num of commits]\n</code></pre> <p>Create a new branch (dev) and switch to it</p> <pre><code>git checkout -b dev\n</code></pre> <p>Switch to another branch (main) and check it out into your working directory</p> <pre><code>git checkout main\n</code></pre> <p>Create a new branch (dev) in a remote repository</p> <pre><code>git push -u origin dev\n</code></pre> <p>Create a new branch (feature) based on some existing one (dev)</p> <pre><code>git branch feature dev\n</code></pre> <p>Merge (join) a specified branch (feature) into your current branch (dev)</p> <pre><code>git checkout dev\ngit merge feature\n</code></pre> <p>Merge a specified branch (feature) into your current branch (dev) as a single commit</p> <pre><code>git checkout dev\ngit merge --squash feature\ngit commit -m \"merge feature\"\n</code></pre> <p>Delete a local branch (feature)</p> <pre><code># safe delete\ngit branch -d feature\n\n# delete without questions\ngit branch -D [failed-feature-branch]\n</code></pre> <p>Delete a remote branch (feature)</p> <pre><code>git push origin --delete feature\n</code></pre>","tags":["git"]},{"location":"develop/git/auto_deploy_after_git_push/","title":"Auto deploy after git push using post-receive file","text":"","tags":["git"]},{"location":"develop/git/auto_deploy_after_git_push/#configuration","title":"Configuration","text":"<p>To enable the <code>post-receive</code> hook script, put a file in the hooks subdirectory of your .git directory that is same named (without any extension) and make it executable:</p> <pre><code>touch GIT_PATH.git/hooks/post-receive\nchmod u+x GIT_PATH.git/hooks/post-receive\n</code></pre> <p>And here is the sample of <code>post-receive</code> file deploying a django project</p> <p>Sample</p> GIT_PATH.git/hooks/post-receive<pre><code>#!/bin/sh\ncd /home/user/scripts/django\nsudo -u uesr git pull\nsudo systemctl restart gunicorn\n</code></pre> <p>When there is sudo command, you need to adding <code>sudoers</code> file to auth run command without entering password by:</p> <p><code>sudo visudo -f /etc/sudoers.d/whatevername</code></p> <p>Sample</p> /etc/sudoers.d/whatevername<pre><code>git ALL=(radio) NOPASSWD: /usr/bin/git\ngit ALL=(ALL) NOPASSWD: /bin/systemctl restart gunicorn\n</code></pre> <p>After all, the commands inside <code>post-receive</code>  will run when you doing <code>git push</code></p>","tags":["git"]},{"location":"develop/git/auto_deploy_after_git_push/#references","title":"References","text":"<p>Using Hook post-receive</p> <p>Running as different user</p>","tags":["git"]},{"location":"develop/mkdocs/1.configuartion/","title":"Mkdocs","text":"<pre><code>## New mkdocs project\nmkdocs new /path/to/build\n\n## Build Site when completed\nmkdocs build\n\n## Test site on localhost\nmkdocs serve\n</code></pre>","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/","title":"Mkdocs cheat sheet","text":"","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#emphasis","title":"Emphasis","text":"<pre><code>this is _italic_ and so is *this*\nthis is __bold__ and so is **this**\n^^underline^^,  ~~strike through~~\n==highlight==  and `inline code`\n==*you* **can** ^^combine^^ `too`==\n</code></pre> <p>this is italic and so is this this is bold and so is this ^^underline^^,  ~~strike through~~ ==highlight==  and <code>inline code</code> ==you can ^^combine^^ ~~too~~==  </p>","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#soft-hard-line-breaks","title":"Soft &amp; Hard Line Breaks","text":"<pre><code>Put 2 spaces at the end of a line\nto force a line break.\nIf you simply\nhit enter and\ndon't use 2 spaces\nit merges the lines\nlike this.\nYou can also force a break &lt;br&gt; anywhere\nusing the `&lt;br&gt;` tag like we just did\n</code></pre> <p>Put 2 spaces at the end of a line to force a line break. If you simply hit enter and don't use 2 spaces it merges the lines like this  You can also force a break  anywhere using the <code>&lt;br&gt;</code> tag like we just did</p>","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#lists","title":"Lists","text":"<pre><code>- need a blank line above to start new list\n- valid bullet symbols `*`, `-` or '+'\n- nested\n    - 4 spaces or 1 tab\n    - to indent\n\n1. use *numbers* for ordered\n    1. can nest\n    3. foo\n\n2. **numbers** can be in order\n    1. can also nest\n\n4. but it will fix them if not\n\n- list item with multiple paragraphs.\n\n    anything like this paragraph should be indented by 4 spaces\n\n    and a third\n\n-   you can add blocks too, just indent by 4 spaces\n\n    &gt; :memo: **title**\n    &gt;\n    &gt; - list under lists\n    &gt; - under lists\n\n-   add tables too\n\n    foo | bar\n    ----|----\n    some|data\n</code></pre> <ul> <li>need a blank line above to start new list</li> <li>valid bullet symbols <code>*</code>, <code>-</code> or '+'</li> <li> <p>nested</p> <ul> <li>4 spaces or 1 tab</li> <li>to indent</li> </ul> </li> <li> <p>use numbers for ordered</p> <ol> <li>nest indents need to be 4 spaces</li> <li>foo</li> </ol> </li> <li> <p>numbers can be in order</p> <ol> <li>can also nest</li> </ol> </li> <li> <p>but it will fix them if not</p> </li> <li> <p>list item with multiple paragraphs.</p> <p>anything like this paragraph should be indented by 4 spaces</p> <p>and a third</p> </li> <li> <p>you can add blocks too, just indent by 4 spaces</p> <p> Note:</p> <ul> <li>list under lists</li> <li>under lists</li> </ul> </li> <li> <p>add tables too</p> foo bar some data </li> </ul>","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#tasks","title":"Tasks","text":"<pre><code>- [ ] Task Lists `- [ ]`\n- [x] x instead of space\n    - [x] will mark it complete\n- [ ] work just like lists\n    * can can contain indents\n    * or anything else a list can\n\n1. Or can be nested under others lists\n    - [ ] like this\n    - [ ] and this\n\n2. This can help\n    - [ ] like this\n    - [ ] and this\n</code></pre> <ul> <li>[ ] Task Lists <code>- [ ]</code><ul> <li>[x] x instead of space</li> <li>[x] will mark it complete</li> </ul> </li> <li> <p>[ ] work just like lists</p> <ul> <li>can can contain indents</li> <li>or anything else a list can</li> </ul> </li> <li> <p>Or can be nested under others lists</p> <ul> <li>[ ] like this</li> <li>[ ] and this</li> </ul> </li> <li> <p>This can help</p> <ul> <li>[ ] like this</li> <li>[ ] and this</li> </ul> </li> </ul>","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#links","title":"Links","text":"<pre><code>[simple link](https://www.google.com )\n[with optional title](https://www.google.com \"Google's Homepage\")\npoint to a [relative file or md](./macos.md) or\nmail link with emoji [\ud83d\udce7](mailto:joshdev@9ci.com) or\nclick this cloud icon to see the list of icon options\n[_cloud_{.icon}](https://material.io/icons/)\n\n\n[Reference-Style Links][some reference id]\nput link at bottom of paragraph or page.\nyou can use numbers or text for\n[reference-style link definitions][1]\nor leave it empty and\njust use the [link text itself]\n\nto [open in new tab](./){.new-tab}\nuse `{target=_blank} or {.new-tab}` attributes\nuse it on [ref links][new tab]{.new-tab} too\n\nIndenting _reference links_\n2 spaces is not required\nbut a recommended convention\n\n  [some reference id]: https://daringfireball.net/projects/markdown/syntax#link\n  [1]: http://reason.com/blog\n  `[link text itself]: ./images/material.png`\n  [new tab]: ./\n</code></pre> <p>simple link with optional title point to a relative file or md or mail link with emoji \ud83d\udce7 or click this cloud icon to see the list of icon options cloud{.icon}</p> <p>Reference-Style Links put link at bottom of paragraph or page. you can use numbers or text for reference-style link definitions or leave it empty and just use the [link text itself]</p> <p>to open in new tab{.new-tab} us <code>{target=_blank} or {.new-tab}</code> attributes use it on ref links{.new-tab} too</p> <p>reference links can be at bottom of paragraph. Indenting 2 spaces is not required but a recommended convention</p> <p><code>[link text itself]: ./images/material.png</code></p>","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#abbreviations","title":"Abbreviations","text":"<pre><code>here are some abbr's\nHTML and FUBAR\n\n&gt;:bulb: if your editor gets confused by\nnot having and enclosing * then\njust add it to end of abbr def.\n\n---\n\n&gt;:warning: Don't indent these, doesn't seem to work\n\n*[abbr]: Abbreviations\n*[def]: Definition\n*[HTML]: Hyper Text Markup Language\n*[FUBAR]:  You know what it means*\n</code></pre> <p>here are some abbr's HTML and FUBAR</p> <p> if your editor gets confused by not having and enclosing * then just add it to end of abbr def.</p> <p> Don't indent these, doesn't seem to work</p> <p>[abbr]: Abbreviations [def]: Definition [HTML]: Hyper Text Markup Language [FUBAR]:  You know what it means*</p>","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#footnotes","title":"Footnotes","text":"<pre><code>Footnotes[^1] work like reference links\nThey auto-number like ordered lists[^3]\nYou can use any\nreference id[^text reference]\nlike ref links they can be\norganized at bottom\nof paragraph or page.\n\n  [^1]: footnote, click the return icon here to go back -&gt;\n  [^3]: the number will not necessarily be what you use\n  [^text reference]: text reference\n</code></pre> <p>Footnotes[^1] work like reference links They auto-number like ordered lists[^3] You can use any reference id[^text reference] like ref links they can be organized at bottom of paragraph or page.</p> <p>[^1]: footnote, click the return icon here to go back -&gt;   [^3]: the number will not necessarily be what you use   [^text reference]: text reference</p>","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#tables","title":"Tables","text":"<pre><code>Colons can be used to align columns.\n3 dashes min to separate headers.\nOuter pipes (|) are optional,\nand you don't need to make the\nraw Markdown line up prettily.\nYou can also use inline Markdown.\n\n|  Tables  |      Are      |   Cool    |\n| -------- |:-------------:| ---------:|\n| col 3 is | right-aligned |     $1600 |\n| col 2 is |   centered    |       $12 |\n|          |   **Total**   |   **$1612** |\n\n==Table== | **Format** | \ud83d\udc40 _scramble_\n--- | --- | ---\n*Still* | `renders` | **nicely**\nicons _cloud_{.icon} | footnotes[^1] | use `&lt;br&gt;` &lt;br&gt; for multi-line &lt;br&gt; line breaks\n</code></pre> <p>Colons can be used to align columns. 3 dashes min to separate headers. Outer pipes (|) are optional,  and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 Total $1612 ==Table== Format \ud83d\udc40 fun Still <code>renders</code> nicely icons cloud{.icon} footnotes[^1] use <code>&lt;br&gt;</code>  for multi-line  line breaks","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#blockquotes","title":"Blockquotes","text":"<pre><code>&gt; Blockquotes are handy to callout text.\nthey are greedy and will keep\ngrabbing text. The '&gt;' is optional unless trying join\n&gt;\nparagraphs, tables etc.\n\na blank line and a new paragraph\nor other markdown thing end them\n\n&gt;:bulb:\nuse a `---` seperator or `&lt;br&gt;`\nif you want multiple sepearte block quotes\n\n---\n\n&gt; can have nested\n&gt; &gt; blockquotes inside of block quotes\nblock quotes can also contain any valid markdown\n</code></pre> <p>Blockquotes are handy to callout text. they are greedy and will keep grabbing text. The '&gt;' is optional unless trying join</p> <p>paragraphs, tables etc.</p> <p>a blank line and a new paragraph or other markdown thing end them</p> <p> use a <code>---</code> seperator or <code>&lt;br&gt;</code> if you want multiple seperate block quotes to follow</p> <p>can have nested</p> <p>blockquotes inside of block quotes block quotes can also contain any valid markdown</p>","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#blocks-admonitions-callouts-sidebars","title":"Blocks - admonitions, callouts, sidebars","text":"<pre><code>&gt; :memo: **Memo Admonition**\nuse blockquotes\nwith emoji indicators for\nadmonition memos, callout etc..\n\n---\n\n&gt; :boom:\nTitle title like above is optional\n\n---\n\n&gt; :bulb: See [the section about blocks](2.cheat_sheet.md#cheatsheet)\nfor the list of emojis that can be used.\n</code></pre> <p> Memo Admonition use blockquotes with emoji indicators for admonition memos, callout etc..</p> <p> Title title like above is optional</p> <p> See the section about blocks for the list of emojis that can be used.</p>","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#row-divs","title":"Row Divs","text":"<pre><code>&gt; :bug: **here is another example**\nthis uses the row class and will make\nany blocks, figures, etc equal spaced\n\n---\n\n&gt; :thumbsup: they will be equal sizes\nwith whatever width is left from image\nand as you can see the heights get adjusted to be equal as well\n\n---\n</code></pre> <p> here is another example well just use admonitions and a table</p> <p> they will be equal sizes with whatever width is left from image and as you can see the heights get adjusted to be equal as well</p>","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#headings-breaks","title":"Headings &amp; Breaks","text":"<p>{.pct50}</p> <pre><code># h1 Heading\n## h2 Heading\n## h3 Heading\n### h4 Heading\n\nHorizontal Rules\n\n---\n</code></pre> <p></p>","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#h1-heading","title":"h1 Heading","text":"","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#h2-heading","title":"h2 Heading","text":"","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#h3-heading","title":"h3 Heading","text":"","tags":["mkdocs"]},{"location":"develop/mkdocs/2.cheat_sheet/#h4-heading","title":"h4 Heading","text":"<p>Horizontal Rules</p>","tags":["mkdocs"]},{"location":"develop/mkdocs/3.chear_sheet%28theme%29/","title":"Mkdocs Cheat Sheet (theme)","text":"","tags":["mkdocs","mkdocs-material"]},{"location":"develop/mkdocs/3.chear_sheet%28theme%29/#quote-block-need-extensions","title":"Quote block (need extensions)","text":"<pre><code>!!! note annotate \"Phasellus posuere in sem ut cursus (1)\" \n\n    Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et\n    euismod nulla. \n\n    1.  :man_raising_hand: I'm an annotation!\n    2.  :woman_raising_hand: I'm an annotation as well!\n</code></pre> <p>Phasellus posuere in sem ut cursus (1)</p> <p>Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. </p> <ol> <li> I'm an annotation!</li> <li> I'm an annotation as well!</li> </ol> <p>Check out the documentation</p>","tags":["mkdocs","mkdocs-material"]},{"location":"develop/svelte/making_a_blog_website_with_sveltekit/","title":"SvelteKit blog","text":"","tags":["svelte","markdown"]},{"location":"develop/svelte/making_a_blog_website_with_sveltekit/#header-2","title":"header 2","text":"","tags":["svelte","markdown"]},{"location":"develop/svelte/making_a_blog_website_with_sveltekit/#header-3","title":"header 3","text":"","tags":["svelte","markdown"]},{"location":"postgresql/01.sql_cheat_sheet/","title":"Postgres SQL cheat sheet","text":"<p>Official document https://www.postgresqltutorial.com/postgresql-select/</p> <p>Nice diagram from dunwu</p> <p></p>","tags":["postgresql","sql"]},{"location":"postgresql/01.sql_cheat_sheet/#union-except-intersect","title":"Union , Except , Intersect","text":"","tags":["postgresql","sql"]},{"location":"postgresql/01.sql_cheat_sheet/#union","title":"Union","text":"<pre><code>-- Return only 1 row for duplicate data\n\nSELECT * FROM top_rated_films\nUNION\nSELECT * FROM most_popular_films;\n\n\n--  with all duplicate data\n\nSELECT * FROM top_rated_films\nUNION ALL\nSELECT * FROM most_popular_films;\n</code></pre>","tags":["postgresql","sql"]},{"location":"postgresql/01.sql_cheat_sheet/#except","title":"Except","text":"<p>Rows area not in table 2</p> <pre><code>SELECT * FROM table1\nEXCEPT\nSELECT * FROM table2;\n</code></pre>","tags":["postgresql","sql"]},{"location":"postgresql/01.sql_cheat_sheet/#intersect","title":"Intersect","text":"<pre><code>SELECT select_list\nFROM A\nINTERSECT\nSELECT select_list\nFROM B;\n</code></pre>","tags":["postgresql","sql"]},{"location":"postgresql/02.query_sample/","title":"Postgres Query Sample","text":"","tags":["postgresql","sql"]},{"location":"postgresql/02.query_sample/#system","title":"System","text":"","tags":["postgresql","sql"]},{"location":"postgresql/02.query_sample/#check-usage-for-schema","title":"Check usage for schema","text":"<pre><code>SELECT schema_name, pg_size_pretty(sum(table_size)::bigint),\n(sum(table_size) / pg_database_size(current_database())) * 100\nFROM (\nSELECT pg_catalog.pg_namespace.nspname as schema_name,\npg_relation_size(pg_catalog.pg_class.oid) as table_size\nFROM   pg_catalog.pg_class\nJOIN pg_catalog.pg_namespace ON relnamespace = pg_catalog.pg_namespace.oid\n) t\nGROUP BY schema_name\nORDER BY schema_name\n</code></pre>","tags":["postgresql","sql"]},{"location":"postgresql/02.query_sample/#check-table-or-columns","title":"Check table or columns","text":"<pre><code>select * from INFORMATION_SCHEMA.COLUMNS where table_schema = 'table_schema' and table_name = 'table' and column_name = 'column' and is_updatable = 'YES'; select * from INFORMATION_SCHEMA.tables  where table_schema = 'table_schema' and table_type = 'BASE TABLE';\n</code></pre>","tags":["postgresql","sql"]},{"location":"postgresql/02.query_sample/#check-auto-vacuum-analyze-time","title":"Check auto vacuum analyze time","text":"<pre><code>select relname,last_vacuum, last_autovacuum, last_analyze, vacuum_count, autovacuum_count,\nlast_autoanalyze from pg_stat_user_tables where schemaname = 'schemaname' order by relname ASC;\n</code></pre>","tags":["postgresql","sql"]},{"location":"postgresql/02.query_sample/#check-pg_indexes","title":"Check pg_indexes","text":"<pre><code>select * from pg_indexes where tablename not like 'pg%' and schemaname = 'schemaname';\n</code></pre>","tags":["postgresql","sql"]},{"location":"postgresql/02.query_sample/#read-data-not-being-vacuumn","title":"Read data not being vacuumn","text":"<pre><code>-- need plugin pg_dirtyread\nSELECT * FROM pg_dirtyread('util.deps_backup_ddl')\nt(deps_id int, deps_view_schema varchar(255), deps_view_name varchar(255), deps_ddl_to_run text );\n</code></pre>","tags":["postgresql","sql"]},{"location":"postgresql/02.query_sample/#backup-and-restore-dependencies","title":"Backup and restore dependencies","text":"<p>reference <pre><code>select util.deps_save_and_drop_dependencies('table_schema', 'table');\nselect util.deps_restore_dependencies('table_schema', 'table');\n</code></pre></p>","tags":["postgresql","sql"]},{"location":"postgresql/02.query_sample/#delete-duplicate-row","title":"Delete duplicate row","text":"<pre><code>-- Method 1\nDELETE FROM table  T1\nUSING table T2\nWHERE  T1.ctid    &lt; T2.ctid       -- delete the \"older\" ones\nAND  T1.date    = T2.date       -- list columns that define duplicates\nAND  T1.ne_name = T2.ne_name\nAND  T1.nr_cell_id = T2.nr_cell_id\nAND  T1.gnodeb_id = T2.gnodeb_id\nAND  T1.cell_id = T2.cell_id;\n\n-- Method 2\nDELETE from table a using table  b where a=b and a.ctid &lt; b.ctid;\n</code></pre>","tags":["postgresql","sql"]},{"location":"postgresql/03.function/","title":"Postgres Query Sample","text":"","tags":["postgresql","sql"]},{"location":"postgresql/03.function/#system","title":"System","text":"","tags":["postgresql","sql"]},{"location":"postgresql/03.function/#correct_systax","title":"correct_systax","text":"<pre><code>CREATE OR REPLACE FUNCTION public.correct_systax(attr character varying, tag_attr character varying)\nRETURNS character varying\nLANGUAGE plpgsql\nAS $function$\nbegin\nif attr like tag_attr then return attr;\nelse return concat(attr,'&gt;&gt;&gt;', tag_attr);\nend if;\nEND; $function$\n;\n</code></pre>","tags":["postgresql","sql"]},{"location":"postgresql/03.function/#correct_systax-by-list","title":"correct_systax by list","text":"<pre><code>CREATE OR REPLACE FUNCTION public.correct_systax(attr character varying, VARIADIC tag_attr character varying[])\nRETURNS character varying\nLANGUAGE plpgsql\nSTRICT\nAS $function$DECLARE\nl integer;\ni integer;\nBEGIN\nl := array_upper(tag_attr, 1);\n\n\nFOR i IN 0 .. l loop\n\nif i = l then return attr;       end if;\n\nif (length(attr) = length(tag_attr[l-i])) then if attr like tag_attr[l-i] then return attr;\nelse return concat(attr,'&gt;&gt;', tag_attr[l-i]);\nend if;\nend if;\n\nEND LOOP;\n\nEND;$function$\n;\n</code></pre>","tags":["postgresql","sql"]},{"location":"python/","title":"Python","text":"","tags":["python","setup"]},{"location":"python/#python-environment","title":"Python environment","text":"<p>Suggest to use virtual python which will not making your system python messup  Shell<pre><code># Mac OS \n\n## if no pyenv installed, run:\nbrew install pyenv\n\n## install python by pyenv\npyenv install 3.10.2\n\n## Create python-virtual-environments\npyenv global system 3.10.2\npython3.10 -m venv env\n\n## active your virtual environment\nsource env/bin/activate\n\n## !To stop using that environment, you just need to deactivate \ndeactivate\n</code></pre></p>","tags":["python","setup"]},{"location":"python/#install-requirement-python-package","title":"Install requirement python package","text":"<p>Install requirement package inside virtual environment <code>pip install -r requirements.txt</code></p>","tags":["python","setup"]},{"location":"python/#upgrade-package-by-pip-requirement-file","title":"upgrade package by pip &amp; requirement file","text":"<p><code>pip install --upgrade --force-reinstall -r requirements.txt</code></p>","tags":["python","setup"]},{"location":"python/#iterate-over-files-and-print-line-with-keyword","title":"iterate over files and print line with keyword","text":"<pre><code># import required module\nimport os\n\n# assign directory\ndirectory = '.'\n\n# assign keyword\nkeyword = \"args['log_hash']:\"\n\n# iterate over files and print line with keyword\nfor filename in os.scandir(directory):\n    if filename.is_file():\n        # print(filename.path)\n        with open(filename.path, 'r') as f:\n            data = f.readlines()\n            for line in data:\n                if keyword in line:\n                    print(line)\n</code></pre>","tags":["python","setup"]},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#git","title":"git","text":"<ul> <li>Git workflow</li> <li>Auto deploy after git push</li> </ul>"},{"location":"tags/#home","title":"home","text":"<ul> <li>Home</li> </ul>"},{"location":"tags/#mac","title":"mac","text":"<ul> <li>Mac OS</li> </ul>"},{"location":"tags/#markdown","title":"markdown","text":"<ul> <li>SvelteKit blog</li> </ul>"},{"location":"tags/#mkdocs","title":"mkdocs","text":"<ul> <li>mkdocs</li> <li>Cheat Sheet</li> <li>Cheat Sheet (mkdocs-material)</li> </ul>"},{"location":"tags/#mkdocs-material","title":"mkdocs-material","text":"<ul> <li>Cheat Sheet (mkdocs-material)</li> </ul>"},{"location":"tags/#postgresql","title":"postgresql","text":"<ul> <li>SQL Cheat sheet</li> <li>Query Sample</li> <li>function Sample</li> </ul>"},{"location":"tags/#python","title":"python","text":"<ul> <li>Python</li> </ul>"},{"location":"tags/#setup","title":"setup","text":"<ul> <li>Python</li> </ul>"},{"location":"tags/#shell","title":"shell","text":"<ul> <li>Linux shell script</li> </ul>"},{"location":"tags/#sql","title":"sql","text":"<ul> <li>SQL Cheat sheet</li> <li>Query Sample</li> <li>function Sample</li> </ul>"},{"location":"tags/#svelte","title":"svelte","text":"<ul> <li>SvelteKit blog</li> </ul>"}]}